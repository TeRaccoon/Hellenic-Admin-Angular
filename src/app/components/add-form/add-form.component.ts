import { Component } from '@angular/core';
import { DataService } from '../../services/data.service';
import { FormService } from '../../services/form.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { faCloudUpload } from '@fortawesome/free-solid-svg-icons';

@Component({
  selector: 'app-add-form',
  templateUrl: './add-form.component.html',
  styleUrls: ['./add-form.component.scss'],
})
export class AddFormComponent {
  faCloudUpload = faCloudUpload;

  addForm: FormGroup;
  formVisible = 'hidden';
  formData: {
    [key: string]: {
      inputType: string;
      dataType: string;
      required: boolean;
      fields: string;
    };
  } = {};
  tableName: string = '';

  file: File | null = null;
  fileName = '';

  selectData: { key: string; data: string[] }[] = [];

  filteredReplacementData: {
    [key: string]: {
      data: { id: Number; replacement: String }[];
    }
  } = {};

  replacementData: {
    [key: string]: {
      data: { id: Number; replacement: String }[];
    }
  } = {};

  alternativeSelectData: {
    [key: string]: {
      data: {value: string}[]
    }
  } = {};

  autoGeneratedReplacement: { [key: string]: {value: string} } = {};

  alternativeSelectedData: { [key: string]: {selectData: string} } = {};
  selectedReplacementData: { [key:string]: {selectData: String, selectDataId: Number | null } | null} = {};
  selectedReplacementFilter: { [key:string]: {selectFilter: string } } = {};
  selectOpen: {[key: string]: {opened: boolean}} = {};

  constructor(
    private dataService: DataService,
    private formService: FormService,
    private fb: FormBuilder,
    private http: HttpClient
  ) {
    this.addForm = this.fb.group({});
  }

  ngOnInit() {
    this.formService.getAddFormVisibility().subscribe(async (visible) => {
      this.formVisible = visible ? 'visible' : 'hidden';
      this.formData = this.formService.getAddFormData();
      this.tableName = this.formService.getSelectedTable();
      if (this.tableName !== '' && Object.keys(this.formData).length != 0) {
        this.buildForm();
        await this.replaceAmbiguousData();
        await this.isAutoGenerated();
      }
    });
  }

  async replaceAmbiguousData() {
    const data = await this.formService.replaceAmbiguousData(
      this.tableName,
      this.formData,
      this.replacementData,
      this.dataService
    );
    this.formData = data.formData;
    this.filteredReplacementData = data.replacementData;
    this.replacementData = data.replacementData;
    this.alternativeSelectData = this.formService.getAlternativeSelectData();
    Object.keys(this.alternativeSelectData).forEach((key) => {
      this.alternativeSelectedData[key] = { selectData: '' };
    });
    Object.keys(this.replacementData).forEach((key) => {
      this.selectedReplacementData[key] = null;
      this.selectedReplacementFilter[key] = { selectFilter: ''};
      this.selectOpen[key] = {opened: false};
    });
  }

  async isAutoGenerated() {
    switch (this.tableName) {
      case "invoices":
        await this.replaceAutoGeneratedFields("title");
        break;
    }
    return false;
  }

  async replaceAutoGeneratedFields(field: string) {
    switch (field) {
      case "title":
        this.dataService.collectData("next-invoice-id", this.tableName).subscribe((data: any) => {
          this.autoGeneratedReplacement[field] = {value: "INV" + data.next_id};
        });
        break;
    }
  }

  buildForm() {
    let index = 0;
    for (const key in this.formData) {
      if (this.formData.hasOwnProperty(key)) {
        const field = this.formData[key];

        if (field.inputType == 'select' && field.dataType.startsWith('enum')) {
          const options = this.deriveEnumOptions(field);
          this.selectData.push({ key: key, data: options });
        }
        const validators = field.required ? [Validators.required] : [];
        this.addForm.addControl(
          field.fields,
          this.fb.control({ value: '', disabled: false }, validators)
        );
        index++;
      }
    }
    this.addForm.addControl('action', this.fb.control('add'));
    this.addForm.addControl('table_name', this.fb.control(this.tableName));
  }

  formSubmit() {
    if (this.file != null && this.addForm.value['retail_item_id']) {
      this.dataService
        .collectData(
          'image-count-from-item-id',
          this.addForm.value['retail_item_id']
        )
        .subscribe((data: any) => {
          if (this.file) {
            if (data != null) {
              this.fileName = data + 1 + '_' + this.file.name;
            } else {
              this.fileName = this.file.name;
            }
            this.addForm.value['image_file_name'] = this.fileName;

            const formData = new FormData();

            formData.append('image', this.file, this.fileName);
            this.sumbissionWithImage(formData);
          }
        });
    } else {
      this.sumbissionWithoutImage();
    }
  }

  submitImageOnly() {
    if (this.file != null && this.tableName == 'retail_items') {
      if (this.addForm.value['retail_item_id'] == null) {
        // Show message asking to select an item first
      }
      this.dataService.collectData('image-count-from-item-id', this.addForm.value['retail_item_id']).subscribe((data: any) => {
        if (this.file) {
          if (data != null) {
            this.fileName = data + 1 + '_' + this.file.name;
          } else {
            this.fileName = this.file.name;
          }

          const formData = new FormData();

          formData.append('image', this.file, this.fileName);
          this.dataService.uploadImage(formData).subscribe((uploadResponse: any) => {
            if (uploadResponse.success) {
              this.formService.setMessageFormData({
                title: 'Success!',
                message: 'Image uploaded successfully as ' + this.fileName,
              });
            } else {
              this.formService.setMessageFormData({
                title: 'Error!',
                message: uploadResponse.message,
              });
              this.formService.showMessageForm();
            }
          })
        }
      });
    }
  }

  sumbissionWithoutImage() {
    this.dataService.submitFormData(this.addForm.value).subscribe((data: any) => {
        this.formService.setMessageFormData({
          title: data.success ? 'Success!' : 'Error!',
          message: data.message,
        });
        this.endSumbission(data.success);
    });
  }

  sumbissionWithImage(formData: FormData) {
    this.dataService.uploadImage(formData).subscribe((uploadResponse: any) => {
      if (uploadResponse.success) {
        this.dataService
          .submitFormData(this.addForm.value)
          .subscribe((data: any) => {
            this.formService.setMessageFormData({
              title: data.success ? 'Success!' : 'Error!',
              message: data.message,
            });
          });
      } else {
        this.formService.setMessageFormData({
          title: 'Error!',
          message: uploadResponse.message,
        });
        this.formService.showMessageForm();
        this.hide();
      }
    });
  }

  endSumbission(reset: boolean) {
    this.formService.showMessageForm();
    this.hide();
    if (reset) {
      this.formService.setReloadType('hard');
      this.formService.requestReload();
    }
  }

  primeImage(event: any, submit: boolean) {
    this.file = event.target.files[0];
    submit && this.submitImageOnly();
  }

  deriveEnumOptions(field: any) {
    return field.dataType
      .replace('enum(', '')
      .replace(')', '')
      .split(',')
      .map((option: any) => option.replace(/'/g, '').trim());
  }

  selectDataFromKey(key: string) {
    const matchingData = this.selectData.find((data) => data.key === key);

    if (matchingData) {
      return matchingData.data;
    }

    return [];
  }

  hide() {
    this.formService.hideAddForm();
  }

  updateSelectedReplacementDataFromKey(dataId: Number, dataValue: String, key: string, field: string) {
    this.selectedReplacementData[key] = {selectData: dataValue, selectDataId: dataId};
    this.addForm.get(field)?.setValue(dataId);
    this.selectOpen[key].opened = false;
  }

  filterDropSelect(key: string, event: any, field: string | null) {
    this.filteredReplacementData = JSON.parse(JSON.stringify(this.replacementData));
    var filter = event.target.value;
    this.filteredReplacementData[key].data = this.replacementData[key].data.filter((data) => {
      return data.replacement.includes(filter);
    });
    if (field) {
      this.addForm.get(field)?.setValue(filter);
    }
  }

  updateAlternativeSelectData(field: string, data: any, key: string) {
    this.alternativeSelectedData[key] = { selectData: data };
    this.addForm.get(field)?.setValue(data);
    this.selectOpen[key].opened = false;
  }
}
