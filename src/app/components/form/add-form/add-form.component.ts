import { Component, effect } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { DataService } from '../../../services/data.service';
import { AddressUpdate } from '../children/invoice-address/types';
import {
  DEFAULT_ADDRESS,
  DEFAULT_SELECT_DATA,
  DEFAULT_SINGLE_ADDRESS,
  DEFAULT_SUPPLIER_INVOICE,
  DELETE_TABLE_MAP,
  DISPLAY_INPUT_FIELD_TABLE_MAP_EXCLUSIONS,
  DISPLAY_PRICE_WARNING_TABLES,
  FULLSCREEN_TABLES,
  ITEM_WIDGET_TABLES,
  STANDARD_IMAGE_SUBMISSION_TABLES,
} from '../consts';
import { FORM_ICONS } from '../icons';
import { FormService } from '../service';
import {
  CustomerAddress,
  Data,
  FormState,
  FormType,
  InvoiceDetails,
  KeyedAddress,
  KeyedData,
  ReplacementData,
  ReplacementTextData,
  SaleType,
  SelectData,
  SelectReplacementData,
  Settings,
} from '../types';

@Component({
  selector: 'app-add-form',
  templateUrl: './add-form.component.html',
  styleUrls: ['./add-form.component.scss'],
})
export class AddFormComponent {
  SaleType = SaleType;

  icons = FORM_ICONS;

  disabled = false;

  noCustomer = false;
  saleTypeEnabled = true;

  addForm: FormGroup;
  addItemForm: FormGroup;

  mappedFormDataKeys: any;
  mappedFormData = new Map<string, Data>();
  formData: KeyedData = {};

  formSettings: Settings = {
    showAddMore: false,
  };

  tableName = '';

  file: File | null = null;
  fileName = '';

  selectData: { key: string; data: string[] }[] = [];

  filteredReplacementData: Record<string, SelectReplacementData[]> = {};

  replacementData: Record<string, SelectReplacementData[]> = {};

  alternativeSelectData: Record<
    string,
    {
      data: string[];
    }
  > = {};

  itemData: any = [];

  saleType: SaleType = SaleType.Invoice;

  invoicesDetails: InvoiceDetails[] = [];

  addressNotListedKeys: string[] = [];
  addresses: KeyedAddress;

  invoiceCreated = false;

  formState!: FormState;

  addItemFormSubmitAttempted = false;

  autoGeneratedReplacement: Record<string, { value: string }> = {};

  dropSelectData: SelectData = DEFAULT_SELECT_DATA;

  invoiceId: number | null = null;

  constructor(
    private dataService: DataService,
    private formService: FormService,
    private fb: FormBuilder
  ) {
    this.addForm = this.fb.group({});
    this.addItemForm = this.fb.group({});
    this.addresses = DEFAULT_ADDRESS;

    this.resetFormState();

    effect(() => {
      const visible = this.formService.getFormVisibilitySignal(FormType.Add)();
      this.changeVisibility(visible);
    });
  }

  changeVisibility(visible: boolean) {
    if (!this.formState.hidden) {
      this.clearForm();
    }

    this.formState.visible = visible;

    if (visible && this.formState.hidden != this.tableName) {
      this.loadForm();
    }

    this.formState.hidden = null;
  }

  resetFormState(): void {
    this.formState = {
      loaded: false,
      submissionAttempted: false,
      submitted: false,
      error: null,
      locked: false,
      visible: false,
      imageUploaded: false,
      hidden: null,
    };
    this.addItemFormSubmitAttempted = false;
  }

  async loadForm() {
    this.formData = this.formService.getAddFormData();
    this.tableName = this.formService.getSelectedTable();
    this.formSettings = this.formService.getFormSettings();

    if (this.tableName !== '' && Object.keys(this.formData).length != 0 && !this.formState.loaded) {
      await this.buildForm();
      await this.replaceAmbiguousData();
      await this.isAutoGenerated();
      this.formState.loaded = true;
    }
  }

  clearForm() {
    this.formData = {};
    this.replacementData = {};
    this.addForm = this.fb.group({});
    this.addForm.reset();
    this.resetFormState();
    this.addItemForm = this.fb.group({});
    this.addItemForm.reset();
    this.file = null;
    this.invoiceCreated = false;
    this.disabled = false;
    this.noCustomer = false;
    this.addressNotListedKeys = [];
    this.invoicesDetails = [];
    this.selectData = [];
    this.saleTypeEnabled = true;
    this.autoGeneratedReplacement = {};
    this.alternativeSelectData = {};
  }

  async replaceAmbiguousData() {
    const data = await this.formService.replaceAmbiguousData(this.tableName, this.formData, this.replacementData);
    this.formData = data.formData;
    this.filteredReplacementData = data.replacementData;
    this.replacementData = data.replacementData;
    this.alternativeSelectData = this.formService.getAlternativeSelectData();
    Object.keys(this.alternativeSelectData).forEach((key) => {
      this.dropSelectData.alternative[key] = { selectData: '' };
    });
    Object.keys(this.replacementData).forEach((key) => {
      if (this.filteredReplacementData[key].length > 0 && this.filteredReplacementData[key][0]?.id != null) {
        const tempReplacement =
          this.formData[key].value == null
            ? null
            : this.filteredReplacementData[key].find(
                (item: SelectReplacementData) => item.id === Number(this.formData[key].value)
              )?.replacement;
        this.dropSelectData.selected[key] = {
          selectData: tempReplacement ?? '',
          selectDataId: Number(this.formData[key].value),
        };
        this.filteredReplacementData[key] = this.filteredReplacementData[key].filter(
          (item) => item.replacement != null
        );
      } else if (this.filteredReplacementData[key][0] != null) {
        this.dropSelectData.selectedText[key] = '';
      }
    });
  }

  async isAutoGenerated() {
    switch (this.tableName) {
      case 'invoices':
        await this.replaceAutoGeneratedFields('title');
        this.updateSelectedReplacementDataFromKey(
          this.filteredReplacementData['Warehouse ID'][0].id,
          this.filteredReplacementData['Warehouse ID'][0].replacement,
          'Warehouse ID',
          'warehouse_id',
          false
        );
        break;

      case 'supplier_invoices':
        await this.replaceAutoGeneratedFields('reference');

        this.updateSelectedReplacementDataFromKey(
          this.filteredReplacementData['Warehouse ID'][0].id,
          this.filteredReplacementData['Warehouse ID'][0].replacement,
          'Warehouse ID',
          'warehouse_id',
          true
        );
        break;

      case 'stocked_items': {
        this.updateSelectedReplacementDataFromKey(
          this.filteredReplacementData['Warehouse'][0].id,
          this.filteredReplacementData['Warehouse'][0].replacement,
          'Warehouse',
          'warehouse_id',
          false
        );

        const itemId = this.addForm.get('item_id')?.value;
        if (itemId != null) {
          this.handleStockedItems(itemId);
        }
        break;
      }

      case 'suppliers':
        await this.replaceAutoGeneratedFields('account_code');
        break;

      case 'customers':
        this.addForm.get('discount')?.setValue(0);
        break;
    }
    return false;
  }

  async replaceAutoGeneratedFields(field: string) {
    switch (field) {
      case 'title': {
        const nextInvoiceId = await this.dataService.processGet('next-id', {
          filter: this.tableName,
        });
        if (nextInvoiceId != null) {
          this.addForm.get(field)?.setValue('INV' + nextInvoiceId);
          this.autoGeneratedReplacement[field] = {
            value: 'INV' + nextInvoiceId,
          };
          this.invoiceId = nextInvoiceId;
        }
        break;
      }

      case 'account_code': {
        const nextSupplierAccountCode = await this.dataService.processGet('next-supplier-account-code', {
          filter: this.tableName,
        });
        if (nextSupplierAccountCode) {
          this.autoGeneratedReplacement[field] = {
            value: 'S00-' + nextSupplierAccountCode,
          };
        }
        break;
      }

      case 'reference': {
        const nextId = await this.dataService.processGet('next-id', {
          filter: this.tableName,
        });
        if (nextId != null) {
          this.autoGeneratedReplacement[field] = {
            value: 'SPL' + String(nextId).padStart(6, '0'),
          };
        }
        break;
      }
    }
  }

  async resetAddItemForm() {
    if (this.tableName == 'supplier_invoices') {
      this.addItemForm = this.fb.group(DEFAULT_SUPPLIER_INVOICE);
      if (this.invoiceId == null) {
        this.invoiceId = await this.dataService.processGet('next-id', {
          filter: 'supplier_invoices',
        });
      }
    } else {
      this.addItemForm = this.fb.group({
        item_id: ['', [Validators.required]],
        quantity: ['', [Validators.required]],
        discount: [''],
        unit: ['', [Validators.required]],
      });
    }
  }

  async buildForm() {
    if (this.shouldDisplayItemWidget()) {
      delete this.formData['Item ID'];
      await this.resetAddItemForm();
    }

    let formDataArray = Object.entries(this.formData);

    formDataArray = this.formService.sortFormDataArray(formDataArray);
    this.mappedFormData = new Map(formDataArray);
    this.mappedFormDataKeys = Array.from(this.mappedFormData.keys());

    for (const key in this.formData) {
      if (Object.prototype.hasOwnProperty.call(this.formData, key) && this.formData[key].dataType != undefined) {
        const field = this.formData[key];

        let fieldValue = this.formService.getFieldValues(field.dataType, field.value);
        const characterLimit = this.formService.getCharacterLimit(field.dataType);

        const selectData = this.formService.getSelectDataOptions(field.dataType, field.inputType);
        if (selectData != null) {
          fieldValue = selectData[0];
          this.selectData.push({ key: key, data: selectData });
        }

        const controlValidators = characterLimit != null ? [Validators.maxLength(characterLimit)] : [];
        if (field.required) {
          controlValidators.push(Validators.required);
        }

        this.addForm.addControl(
          field.field,
          this.fb.control({ value: fieldValue != null ? fieldValue : '', disabled: false }, controlValidators)
        );
      }
    }

    this.addForm.addControl('action', this.fb.control('add'));
    this.addForm.addControl('table_name', this.fb.control(this.tableName));

    if (this.shouldDisplayItemWidget()) {
      this.itemData = await this.dataService.processGet('items_id_name_sku');
    }
  }

  async formSubmit() {
    this.formState.submissionAttempted = true;

    if (!this.addForm.valid) return;

    if (STANDARD_IMAGE_SUBMISSION_TABLES.includes(this.tableName)) {
      await this.standardImageSubmission();
      return;
    }

    const validationResult = await this.imageSubmissionValidation();

    if (validationResult !== false) {
      await this.submissionWithImage(validationResult.id, validationResult.name);
      return;
    }

    if (this.file != null) {
      await this.submissionWithoutImage();
    }
  }

  async standardImageSubmission() {
    const uploadResponse = await this.formService.uploadImage(this.file!, this.file!.name);

    if (uploadResponse.success) {
      this.addForm.get('image_file_name')?.setValue(this.file!.name);
      await this.submissionWithoutImage();
    }
  }

  async imageSubmissionValidation() {
    if (!this.canUploadImages()) {
      return false;
    }

    if (this.file == null || this.addForm.get('image_file_name') == null) {
      this.formState.error = 'Please choose an image to upload before trying to upload!';
      return false;
    }

    const id = await this.getImageDependentId();
    const name = this.getImageDependentName();

    if (id == null || name == null) {
      this.formState.error = 'Please fill out the relevant fields to upload an image for before trying to upload!';
      return false;
    }
    return { id: id, name: name };
  }

  async getImageDependentId() {
    switch (this.tableName) {
      case 'items':
        return await this.dataService.processGet('next-id', {
          filter: 'items',
        });

      case 'image_locations':
        return this.addForm.value['page_section_id'];
    }

    return null;
  }

  getImageDependentName() {
    switch (this.tableName) {
      case 'items':
        return this.addForm.get('item_name')?.value;

      case 'image_locations':
        return this.dropSelectData.selected['Page Section ID']?.selectData;
    }

    return null;
  }

  canUploadImages() {
    switch (this.tableName) {
      case 'items':
      case 'image_locations':
        return true;
    }
    return false;
  }

  async submitImageOnly() {
    const validationResult = await this.imageSubmissionValidation();
    if (validationResult !== false) {
      await this.formService.handleImageSubmissions(
        validationResult.id,
        validationResult.name,
        this.file as File,
        this.tableName
      );
    }
  }

  async submissionWithoutImage() {
    const submissionResponse = await this.dataService.submitFormData(this.addForm.value);
    this.formService.setMessageFormData({
      title: submissionResponse.success ? 'Success!' : 'Error!',
      message: submissionResponse.message,
    });
    this.endSubmission(submissionResponse.success, submissionResponse.success);
  }

  async submissionWithImage(id: string, name: string) {
    const imageFileName = await this.formService.processImageName(id, name, this.tableName, true);

    this.addForm.get('image_file_name')?.setValue(imageFileName);
    const formSubmitResponse = await this.dataService.submitFormData(this.addForm.value);

    if (formSubmitResponse.success) {
      await this.formService.handleImageSubmissions(id, name, this.file as File, this.tableName, true);
    }

    this.formService.setMessageFormData({
      title: formSubmitResponse.success ? 'Success!' : 'Error!',
      message: formSubmitResponse.message,
    });

    this.endSubmission(formSubmitResponse.success, formSubmitResponse.success);
  }

  endSubmission(reset: boolean, hideForm: boolean) {
    this.checkEdgeCases();

    if (this.shouldDisplayItemWidget()) {
      this.invoiceCreated = true;
      this.disableControls();
    } else {
      if (!reset) {
        this.formService.setFormVisibility(FormType.Message, true);
      }

      if (hideForm) {
        this.hide();
      }

      if (reset) {
        this.formService.requestReload('hard');
        this.addForm.reset();
        this.alternativeSelectData = {};
        this.formState.submissionAttempted = false;
        this.addForm.get('action')?.setValue('add');
        this.addForm.get('table_name')?.setValue(this.tableName);
        this.formState.error = null;
        this.dropSelectData.selected = {};
        this.saleTypeEnabled = true;
      }
    }
    this.formState.submitted = true;
  }

  checkEdgeCases() {
    if (this.tableName == 'credit_notes_customers') {
      this.checkCreditNoteCustomerEdgeCase();
    }
  }

  async checkCreditNoteCustomerEdgeCase() {
    const invoicedItemID = this.addForm.get('invoiced_item_id')?.value;
    const restock = this.addForm.get('restock')?.value;

    if (invoicedItemID == null) {
      return;
    }

    if (restock == 'Yes') {
      this.restockInvoicedItem(invoicedItemID);
    } else {
      this.addDamagesPayment(invoicedItemID);
    }
  }

  async addDamagesPayment(invoicedItemID: string) {
    this.formService.addDamagesPayment(invoicedItemID);
  }

  async restockInvoicedItem(invoicedItemID: string) {
    this.formService.restockInvoicedItem(invoicedItemID);
  }

  disableControls() {
    Object.keys(this.addForm.controls).forEach((controlKey: string) => {
      this.addForm.get(controlKey)?.disable();
    });

    if (this.tableName == 'invoices') {
      this.saleTypeEnabled = false;
    }

    this.disabled = true;
  }

  shouldDisplayPriceWarning() {
    const includedTables = DISPLAY_PRICE_WARNING_TABLES;
    return includedTables.includes(this.tableName);
  }

  primeImage(event: Event) {
    const input = event.target as HTMLInputElement;
    this.file = input?.files?.[0] ?? null;
  }

  selectDataFromKey(key: string) {
    const matchingData = this.selectData.find((data) => data.key === key);
    if (matchingData) {
      return matchingData.data;
    }

    return [];
  }

  hide() {
    this.formState.visible = false;
    this.formService.setFormVisibility(FormType.Add, false);
  }

  minimize() {
    this.formState.visible = false;
    this.formState.hidden = this.tableName;
  }

  async updateSelectedReplacementDataFromKeyEvent(eventData: ReplacementData) {
    const { dataId, dataValue, key, field, alt } = eventData;
    await this.updateSelectedReplacementDataFromKey(dataId, dataValue, key, field, alt);
  }

  updateSelectedTextReplacementDataFromKeyEvent(eventData: ReplacementTextData) {
    const { dataValue, key, field } = eventData;
    this.updateSelectedTextReplacementDataFromKey(dataValue, key, field);
  }

  updateAlternativeSelectDataFromKeyEvent(eventData: ReplacementTextData) {
    const { dataValue, key, field } = eventData;
    this.updateAlternativeSelectData(dataValue, key, field);
  }

  async updateSelectedReplacementDataFromKey(
    dataId: number,
    dataValue: string,
    key: string,
    field: string,
    alt: boolean
  ) {
    this.updateReplacementData(key, dataId, dataValue);
    this.setFormValue(field, dataId, alt);

    if (this.tableName === 'invoices' && field === 'customer_id') {
      await this.handleInvoiceCustomer(dataId);
    } else if (this.tableName === 'customer_payments' && field === 'customer_id') {
      await this.handleCustomerPayments(dataId);
    } else if (this.tableName === 'credit_notes' && field === 'supplier_id') {
      await this.handleCreditNotesSupplier(dataId);
    } else if (this.tableName === 'credit_notes_customers' && field === 'customer_id') {
      await this.handleCreditNotesCustomers(dataId);
    } else if (this.tableName === 'supplier_payments' && field === 'supplier_id') {
      await this.handleSupplierPayments(dataId);
    } else if (this.tableName === 'stocked_items' && field === 'item_id') {
      await this.handleStockedItems(dataId);
    } else if (this.tableName === 'supplier_invoices' && alt && field === 'item_id') {
      await this.handleSupplierInvoices(dataId);
    } else if (this.tableName === 'credit_notes_customers' && field === 'invoice_id') {
      await this.handleCreditNotesCustomersInvoices(dataId);
    } else if (this.tableName === 'credit_notes_customers' && field === 'invoiced_item_id') {
      await this.handleCreditNotesCustomersInvoicedItems(dataId);
    }

    if (this.isBarcodeGenerationRequired(field)) {
      await this.generateBarcode(alt);
    }
  }

  private updateReplacementData(key: string, dataId: number, dataValue: string) {
    this.dropSelectData.selected[key] = {
      selectData: dataValue,
      selectDataId: dataId,
    };
  }

  private setFormValue(field: string, dataId: number, alt: boolean) {
    const form = alt ? this.addItemForm : this.addForm;
    form.get(field)?.setValue(dataId);
  }

  private async handleInvoiceCustomer(dataId: number) {
    this.updateAddresses(dataId.toString());
    const customerType = await this.dataService.processGet('customer-type', {
      filter: dataId.toString(),
    });
    this.addForm.get('type')?.setValue(customerType);
  }

  private async handleCustomerPayments(dataId: number) {
    this.invoicesDetails = await this.dataService.processGet(
      'invoice-outstanding',
      { filter: dataId.toString() },
      true
    );
    this.updateReplacementDataForInvoices(this.invoicesDetails);
  }

  private async handleCreditNotesSupplier(dataId: number) {
    this.invoicesDetails = await this.dataService.processGet(
      'supplier-invoice-from-supplier',
      { filter: dataId.toString() },
      true
    );
    this.updateReplacementDataForInvoices(this.invoicesDetails, 'reference');
  }

  private async handleCreditNotesCustomers(dataId: number) {
    this.invoicesDetails = await this.dataService.processGet(
      'invoice-by-customer',
      { filter: dataId.toString() },
      true
    );
    this.updateReplacementDataForInvoices(this.invoicesDetails, 'title', 'Invoice');
  }

  private async handleCreditNotesCustomersInvoices(dataId: number) {
    const invoicedItems = await this.dataService.processGet(
      'invoiced-item-by-invoice',
      { filter: dataId.toString() },
      true
    );
    this.updateReplacementDataForInvoices(invoicedItems, 'item_name', 'Invoiced Item ID');
  }

  private async handleCreditNotesCustomersInvoicedItems(dataId: number) {
    const damage = Number(
      await this.dataService.processPost({
        action: 'calculate-damage-from-invoiced-item-id',
        id: dataId,
      })
    ).toFixed(2);
    this.addForm.get('amount')?.setValue(damage);
  }

  private async handleSupplierPayments(dataId: number) {
    this.invoicesDetails = await this.dataService.processGet(
      'supplier-invoice-outstanding',
      { filter: dataId.toString() },
      true
    );
    this.updateReplacementDataForInvoices(this.invoicesDetails, 'reference');
  }

  private async handleStockedItems(dataId: number) {
    const lastPurchasePrice = await this.dataService.processGet('last-purchase-price', { filter: dataId });
    if (lastPurchasePrice.length > 0 && lastPurchasePrice[0] != null) {
      this.addForm.get('purchase_price')?.setValue(lastPurchasePrice[0]);
    }
  }

  private async handleSupplierInvoices(dataId: number) {
    const lastPurchasePrice = await this.dataService.processGet('last-purchase-price', { filter: dataId });
    if (lastPurchasePrice.length > 0 && lastPurchasePrice[0] != null) {
      this.addItemForm.get('purchase_price')?.setValue(lastPurchasePrice[0]);
    }
  }

  inputChanged(field: string) {
    if (this.tableName == 'stocked_items' && field == 'expiry_date' && this.addForm.get('item_id')?.value != null) {
      this.generateBarcode();
    }
  }

  private updateReplacementDataForInvoices(invoicesDetails: any[], key = 'title', replacementKey = 'Invoice ID') {
    this.filteredReplacementData[replacementKey] = this.replacementData[replacementKey] = invoicesDetails.map(
      (i: any) => ({
        id: i.id,
        replacement: i[key],
      })
    );
  }

  private isBarcodeGenerationRequired(field: string) {
    return (
      (this.tableName === 'stocked_items' || this.tableName === 'supplier_invoices') &&
      (field === 'item_id' || field === 'expiry_date')
    );
  }

  async generateBarcode(alt = false) {
    const form = alt ? this.addItemForm : this.addForm;
    if (form.get('item_id')?.value != null && form.get('expiry_date')?.value != null) {
      const item = await this.dataService.processGet('items', {
        filter: form.get('item_id')?.value,
      });
      const stockCode = item['stock_code'];
      const barcode = `${stockCode}-${form.get('expiry_date')?.value}-${this.formService.generateRandomString(7)}`;
      form.get('barcode')?.setValue(barcode);
    }
  }

  async updateAddresses(id: string) {
    const addresses = await this.dataService.processGet('customer-addresses-by-id', { filter: id }, true);

    if (addresses.length == 0) {
      this.addressNotListed('Delivery Address');
      this.addressNotListed('Billing Address');
    } else {
      this.updateCustomerAddresses(addresses, 'Delivery Address', 'address_id');
      this.updateCustomerAddresses(addresses, 'Billing Address', 'billing_address_id');
    }
  }

  updateSelectedTextReplacement(value: string, key: string, field: string) {
    this.addForm.get(field)?.setValue(value);
    this.dropSelectData.selectedText[key] = value;
  }

  updateSelectedTextReplacementDataFromKey(value: string, key: string, field: string) {
    this.addForm.get(field)?.setValue(value);
    this.dropSelectData.selectedText[key] = value;
  }

  async updateCustomerAddresses(addressData: CustomerAddress[], key: string, secondaryKey: string) {
    const addressReplacement = addressData
      .map((address) => {
        let replacement;
        if (key === 'Delivery Address') {
          replacement = [
            address.delivery_address_one,
            address.delivery_address_two,
            address.delivery_address_three,
            address.delivery_address_four,
            address.delivery_postcode,
          ];
        } else {
          replacement = [
            address.invoice_address_one,
            address.invoice_address_two,
            address.invoice_address_three,
            address.invoice_address_four,
            address.invoice_postcode,
          ];
        }

        replacement = replacement.filter((component) => component?.trim()).join(' ');

        return replacement ? { id: Number(address.id), replacement } : null;
      })
      .filter((item): item is { id: number; replacement: string } => item !== null);

    this.dropSelectData.selected[key] = {
      selectData: addressReplacement[0]!.replacement,
      selectDataId: addressReplacement[0]!.id,
    };

    this.addForm.get(secondaryKey)?.setValue(addressReplacement[0]!.id);

    this.replacementData[key] = addressReplacement;
    this.filteredReplacementData[key] = addressReplacement;
  }

  updateAddressValues(addressUpdate: AddressUpdate): void {
    this.addresses[addressUpdate.key] = {
      ...this.addresses[addressUpdate.key],
      [addressUpdate.field]: addressUpdate.value,
    };
  }

  async addAddressToBook(key: string) {
    const customerId = this.addresses[key]?.save == false ? null : this.addForm.get('customer_id')?.value;

    const addressInfo = this.formService.getAddressSecondaryKeyAndPayload(this.addresses, customerId, key);
    const payload = addressInfo.payload;
    const secondaryKey = addressInfo.secondaryKey;

    const response = await this.dataService.submitFormData(payload);
    if (response.success) {
      const id = response.id!;

      this.addressNotListedKeys = this.addressNotListedKeys.filter((addressKey) => addressKey != key);
      if (!this.noCustomer) {
        this.dropSelectData.selected[key] = {
          selectData: [
            this.addresses[key].line1,
            this.addresses[key].line2,
            this.addresses[key].line3,
            this.addresses[key].postcode,
          ].join(' '),
          selectDataId: id,
        };

        const replacement = {
          id: id,
          replacement: [
            this.addresses[key].line1,
            this.addresses[key].line2,
            this.addresses[key].line3,
            this.addresses[key].postcode,
          ].join(' '),
        };

        this.replacementData[key].push(replacement);
        this.addForm.get(secondaryKey)?.setValue(id);
      } else {
        const address = await this.dataService.processGet('customer-addresses', {
          filter: id,
        });
        await this.updateCustomerAddresses([address], key, secondaryKey);
        await this.updateSelectedReplacementDataFromKey(
          id,
          this.filteredReplacementData[key]![this.filteredReplacementData[key].length - 1].replacement,
          key,
          key == 'Delivery Address' ? 'address_id' : 'billing_address_id',
          false
        );
      }

      this.resetAddresses(key);
    } else {
      this.formService.setMessageFormData({
        title: 'Error!',
        message: 'There was an issue adding the address to the address book!',
      });
    }
  }

  resetAddresses(key: string) {
    this.addresses[key] = DEFAULT_SINGLE_ADDRESS;
  }

  updateAlternativeSelectData(data: string, key: string, field: string) {
    this.dropSelectData.alternative[key] = { selectData: data };
    this.addForm.get(field)?.setValue(data);
  }

  async addItem(event: Event) {
    if (!this.addForm.valid && !this.invoiceCreated) {
      this.formState.submissionAttempted = true;
      return;
    }

    if (!this.invoiceCreated) {
      await this.formSubmit();
    }

    this.addItemFormSubmitAttempted = true;
    if (this.addItemForm.valid) {
      this.addItemForm.addControl('action', this.fb.control('add'));

      if (this.tableName == 'supplier_invoices') {
        this.addItemForm.addControl('supplier_invoice_id', this.fb.control(this.invoiceId));
        this.addItemForm.addControl('table_name', this.fb.control('stocked_items'));
      } else {
        this.addItemForm.addControl('invoice_id', this.fb.control(this.invoiceId));
        this.addItemForm.addControl('table_name', this.fb.control('invoiced_items'));
      }

      const submissionResponse = await this.dataService.submitFormData(this.addItemForm.value);
      if (!submissionResponse.success) {
        this.formService.setMessageFormData(
          {
            title: 'Error!',
            message: submissionResponse.message,
          },
          true
        );
      }

      this.formService.requestReload();

      event.preventDefault();
      this.findInvalidControls();

      await this.resetAddItemForm();
      this.dropSelectData.selected['Item ID'] = {
        selectData: '',
        selectDataId: 0,
      };
      this.filteredReplacementData['Item ID'] = this.replacementData['Item ID'];

      this.addItemFormSubmitAttempted = false;
    }
  }

  addressNotListed(key: string) {
    this.formState.submitted = false;
    if (this.addForm.get('customer_id')?.value != '' || this.noCustomer) {
      this.addressNotListedKeys.push(key);
    } else {
      this.formState.error = 'Please select a customer first!';
      this.formState.submitted = true;
    }
  }

  disableCustomer() {
    this.noCustomer = true;
    this.addForm.get('customer_id')?.setValidators(null);
    this.addForm.get('customer_id')?.setValue(null);
    this.addressNotListed('Delivery Address');
    this.addressNotListed('Billing Address');
  }

  changeSaleType(event: Event) {
    const value: SaleType = (event.target as HTMLSelectElement).value as SaleType;
    this.saleType = value;
    if (this.saleType == SaleType.Cash) {
      const data = this.replacementData['Delivery Address'];
      const replacement = data.filter((data: SelectReplacementData) => data.replacement == 'N/A: Counter Sale')[0];
      this.addForm.get('address_id')?.setValue(replacement.id);
      this.dropSelectData.selected['Delivery Address'] = {
        selectData: replacement.replacement,
        selectDataId: replacement.id,
      };
    } else {
      this.addForm.get('address_id')?.setValue(null);
      this.dropSelectData.selected['Delivery Address'] = {
        selectData: '',
        selectDataId: 0,
      };
    }
  }

  findInvalidControls() {
    const invalid = [];
    const controls = this.addForm.controls;
    for (const name in controls) {
      if (controls[name].invalid) {
        invalid.push(name);
      }
    }
    return invalid;
  }

  inputHasError(field: string) {
    return this.addForm.get(field)?.invalid && this.formState.submissionAttempted ? 'error-input' : '';
  }

  itemInputHasError(field: string) {
    return this.addItemForm.get(field)?.invalid && this.addItemFormSubmitAttempted ? 'error-input' : '';
  }

  canDisplayInputField(key: string) {
    const excludedFields = DISPLAY_INPUT_FIELD_TABLE_MAP_EXCLUSIONS[this.tableName] || [];

    if (this.tableName === 'invoices') {
      if (
        (key === 'Customer Name' && this.noCustomer) ||
        (key === 'Billing Address' && this.saleType === SaleType.Cash)
      ) {
        return false;
      }
    }

    if (this.tableName === 'credit_notes_customers') {
      if (key === 'Restock' && this.addForm.get('invoiced_item_id')?.value == '') {
        return false;
      }
      if (key === 'Invoiced Item ID' && this.addForm.get('invoice_id')?.value == '') {
        return false;
      }
    }

    return !excludedFields.includes(key);
  }

  close() {
    this.formService.requestReload('hard');
    this.formService.setMessageFormData({
      title: 'Success',
      message: 'Invoice saved successfully!',
    });
    this.hide();
  }

  fullscreen() {
    return FULLSCREEN_TABLES.includes(this.tableName);
  }

  deleteRow(id: number) {
    const table = DELETE_TABLE_MAP[this.tableName as keyof typeof DELETE_TABLE_MAP];
    this.formService.setSelectedTable(table);
    this.formService.setDeleteFormIds([id]);
    this.formService.setFormVisibility(FormType.Delete, true);
  }

  shouldDisplayItemWidget() {
    return ITEM_WIDGET_TABLES.includes(this.tableName);
  }

  shouldDisplayAddressNotListed(key: string) {
    return (
      (key == 'Delivery Address' || key == 'Billing Address') &&
      !this.addressNotListedKeys.includes(key) &&
      !this.formState.submitted
    );
  }
}
